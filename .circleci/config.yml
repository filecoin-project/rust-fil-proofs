
version: 2
jobs:
  cargo_fetch:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: rustup component add rustfmt-preview
      - run: rustup component add clippy-preview
      - run: cargo update
      - run: cargo fetch
      - run: rustc +stable --version
      - run: rustc +$(cat rust-toolchain) --version
      - persist_to_workspace:
          root: "."
          paths:
            - Cargo.lock
      - save_cache:
          key: cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - /root/.cargo
            - /root/.rustup
  test:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_cache:
          keys:
            - parameter-cache-{{ .Revision }}
      - run:
          name: Test (stable)
          command: cargo +stable test --verbose --all
          no_output_timeout: 15m
      - run:
          name: Prune the output files
          command: |
            for file in target/debug/* target/debug/.??*; do
              [ -d $file -o ! -x $file ] && rm -r $file
            done
      - persist_to_workspace:
          root: "."
          paths:
            - target/debug/*

  test_release:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
            - parameter-cache-{{ .Revision }}
      - run:
          name: Test (stable) in release profile
          command: |
            cargo +stable test --verbose --release --all
            RUSTFLAGS="-D warnings" cargo +stable build --examples --release --all

  test_disk_trees:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
            - parameter-cache-{{ .Revision }}
      - run:
          name: Test (nightly) disk-trees feature
          command: |
            cargo +$(cat rust-toolchain) test --verbose --release -p storage-proofs --features disk-trees -Z package-features
          environment:
            FIL_PROOFS_REPLICATED_TREES_DIR: replicated-disk-trees

  test_ignored_release:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
            - parameter-cache-{{ .Revision }}
      - run:
          name: Test (stable) in release profile
          command: cargo +stable test --verbose --release --all -- --ignored
      - save_cache:
          key: parameter-cache-{{ .Revision }}
          paths:
            - /root/.filecoin-parameter-cache

  test_nightly:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_cache:
          keys:
            - parameter-cache-{{ .Revision }}
      - run:
          name: Test (nightly)
          command: cargo +$(cat rust-toolchain) test --verbose --all
          no_output_timeout: 15m

  bench_nightly:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_cache:
          keys:
            - parameter-cache-{{ .Revision }}
      - run:
          name: Benchmarks (nightly)
          command: cargo +$(cat rust-toolchain) build --benches --verbose --all
          no_output_timeout: 15m

  metrics_capture:
    docker:
      - image: filecoin/rust:latest
    environment:
      RUSTFLAGS: -Awarnings -C target-cpu=native
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - add_ssh_keys:
          fingerprints:
            - "f8:db:3c:6d:f9:74:2c:9e:07:42:3f:3f:23:07:f7:6d"
      - run:
          name: Add benchmark server's public key to known hosts
          command: |
            mkdir -p ~/.ssh/
            if [[ ! -f ~/.ssh/known_hosts ]] || ! grep "${BENCHMARK_SERVER_IP_ADDR}" ~/.ssh/known_hosts; then
              echo "
            ${BENCHMARK_SERVER_RSA_FINGERPRINT}
              " >> ~/.ssh/known_hosts
            fi
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_cache:
          keys:
            - parameter-cache-{{ .Revision }}
      - run:
          name: Install jq
          command: apt-get install time jq -yqq
      - run:
          name: Run hash-constraints benchmarks on remote host
          command: |
            ./fil-proofs-tooling/scripts/benchy-remote.sh "${BENCHMARK_SERVER_SSH_USERNAME}@${BENCHMARK_SERVER_IP_ADDR}" hash-constraints > hash-constraints.json
            cat hash-constraints.json
          no_output_timeout: 60m
      - run:
          name: Run micro benchmarks
          command: |
            ./fil-proofs-tooling/scripts/micro-remote.sh "${BENCHMARK_SERVER_SSH_USERNAME}@${BENCHMARK_SERVER_IP_ADDR}" > micro-benchmarks.json
            cat micro-benchmarks.json
          no_output_timeout: 60m
      - run:
          name: Run ZigZag benchmarks using 1GiB sectors
          command: |
            ./fil-proofs-tooling/scripts/benchy-remote.sh "${BENCHMARK_SERVER_SSH_USERNAME}@${BENCHMARK_SERVER_IP_ADDR}" zigzag --size=$((1024*1024)) > zigzag-benchmarks.json
            cat zigzag-benchmarks.json
          no_output_timeout: 60m
      - run:
          name: Aggregate benchmarks into single JSON document
          command: |
            ./fil-proofs-tooling/scripts/aggregate-benchmarks.sh zigzag-benchmarks.json micro-benchmarks.json hash-constraints.json > aggregated-benchmarks.json
            cat aggregated-benchmarks.json
      - store_artifacts:
          path: zigzag-benchmarks.json
      - store_artifacts:
          path: hash-constraints.json
      - store_artifacts:
          path: micro-benchmarks.json
      - store_artifacts:
          path: aggregated-benchmarks.json

  rustfmt:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run:
          name: Run cargo fmt
          command: cargo fmt --all -- --check

  clippy:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run:
          name: Run cargo clippy
          command: cargo clippy --all

  build_linux_release:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v12-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run:
          name: Build (release)
          command: cargo +$(cat rust-toolchain) build --release --verbose --all
      - run:
          name: Install jq
          command: apt-get install jq -yqq
      - run:
          name: Run publish-release.sh
          command: bash ./scripts/publish-release.sh

  build_darwin_release:
    macos:
      xcode: "10.0.0"
    working_directory: ~/crate
    resource_class: large
    steps:
      - run:
          name: Configure environment variables
          command: |
            echo 'export PATH="${HOME}/.cargo/bin:${HOME}/.bin:${PATH}"' >> $BASH_ENV
            echo 'export CIRCLE_ARTIFACTS="/tmp"' >> $BASH_ENV
      - checkout
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: cargo update
      - run: cargo fetch
      - run:
          name: Build (release)
          command: cargo +$(cat rust-toolchain) build --release --verbose --all
      - run:
          name: Install jq
          command: |
            mkdir $HOME/.bin
            curl --location https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64 --output $HOME/.bin/jq
            chmod +x $HOME/.bin/jq
      - run:
          name: Run publish-release.sh
          command: bash ./scripts/publish-release.sh

workflows:
  version: 2
  test_all:
    jobs:
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch
      - test_release:
          requires:
            - cargo_fetch
      - test_disk_trees:
          requires:
            - cargo_fetch
      - test_ignored_release:
          requires:
            - cargo_fetch
      - test:
          requires:
            - cargo_fetch
      - test_nightly:
          requires:
            - cargo_fetch
      - bench_nightly:
          requires:
            - cargo_fetch
      - metrics_capture:
          requires:
            - cargo_fetch
          filters:
            branches:
              only: master
      - build_linux_release:
          requires:
            - cargo_fetch
          filters:
            branches:
              only: master
      - build_darwin_release:
          requires:
            - cargo_fetch
          filters:
            branches:
              only: master
