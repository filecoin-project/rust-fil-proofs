version: 2.1

parameters:
  nightly-toolchain:
    type: string
    default: "nightly-2020-11-09"

executors:
  default:
    docker:
      - image: filecoin/rust:latest
    working_directory: /mnt/crate
    resource_class: 2xlarge+

setup-env: &setup-env
  FIL_PROOFS_PARAMETER_CACHE: "/root/filecoin-proof-parameters/"
  RUST_LOG: info


jobs:
  ensure_groth_parameters_and_keys_linux:
    executor: default
    environment: *setup-env
    steps:
      - checkout
      - restore_parameter_cache
      - ensure_filecoin_parameters
      - save_parameter_cache

  cargo_fetch:
    executor: default
    environment: *setup-env
    steps:
      - checkout
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
          no_output_timeout: 30m
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: rustup install << pipeline.parameters.nightly-toolchain >>
      - run: rustup component add rustfmt-preview
      - run: rustup component add clippy
      - run: cargo update
      - run: cargo fetch
      - run: rustc +$(cat rust-toolchain) --version
      - run: rustup toolchain list --verbose
      - persist_to_workspace:
          root: "."
          paths:
            - Cargo.lock
      - save_cache:
          key: cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - /root/.cargo
            - /root/.rustup
  test:
    executor: default
    environment: *setup-env
    parameters:
      crate:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_parameter_cache
      - run:
          name: Test (<< parameters.crate >>)
          command: cargo +$(cat rust-toolchain) test --verbose --package << parameters.crate >>
          no_output_timeout: 30m

  test_release:
    executor: default
    environment: *setup-env
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_parameter_cache
      - run:
          name: Test in release profile
          command: |
            ulimit -n 20000
            ulimit -u 20000
            ulimit -n 20000
            cargo +$(cat rust-toolchain) test --verbose --release --workspace
            RUSTFLAGS="-D warnings" cargo +$(cat rust-toolchain) build --examples --release --workspace
          no_output_timeout: 30m

  test_ignored_release:
    executor: default
    environment: *setup-env
    parameters:
      crate:
        type: string
      features:
        type: string
        default: ""
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_parameter_cache
      - run:
          name: Test ignored in release profile
          command: |
              ulimit -n 20000
              ulimit -u 20000
              ulimit -n 20000
              cd << parameters.crate >>
              cargo test --release << parameters.features >> -- --ignored --nocapture
          environment:
            RUST_TEST_THREADS: 1
          no_output_timeout: 30m


  # Running with `use_multicore_sdr=true` should be integrated directly into the test code. For now we
  # just re-run the lifecycle tests to exercise the use_multicore_sdr code path with that setting set.
  test_multicore_sdr:
    executor: default
    environment: *setup-env
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_parameter_cache
      - run:
          name: Test with use_multicore_sdr pairing enabled
          command: |
            ulimit -n 20000
            ulimit -u 20000
            ulimit -n 20000
            cargo +<< pipeline.parameters.nightly-toolchain >> -Zpackage-features test --all --verbose --release lifecycle -- --ignored --nocapture
          no_output_timeout: 30m
          environment:
            RUST_TEST_THREADS: 1
            FIL_PROOFS_USE_MULTICORE_SDR: true

      - run:
          name: Test with use_multicore_sdr and blst enabled
          command: |
            ulimit -n 20000
            ulimit -u 20000
            ulimit -n 20000
            cargo +<< pipeline.parameters.nightly-toolchain >> -Zpackage-features test --all --no-default-features --features gpu,blst --verbose --release  lifecycle -- --ignored --nocapture
          no_output_timeout: 30m
          environment:
            RUST_TEST_THREADS: 1
            FIL_PROOFS_USE_MULTICORE_SDR: true

  test_blst:
    executor: default
    environment: *setup-env
    parameters:
      crate:
        type: string
      features:
        type: string
        default: "gpu,blst"
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_parameter_cache
      - run:
          name: Test ignored with blst enabled (<< parameters.crate >>)
          command: |
            ulimit -n 20000
            ulimit -u 20000
            ulimit -n 20000
            RUST_LOG=trace cargo +<< pipeline.parameters.nightly-toolchain >> -Zpackage-features test --no-default-features --features << parameters.features >> --verbose --release --package << parameters.crate >> -- --nocapture
          no_output_timeout: 30m
          environment:
            RUST_TEST_THREADS: 1

  test_blst_ignored:
    executor: default
    environment: *setup-env
    parameters:
      crate:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_parameter_cache

      - run:
          name: Test with blst enabled (<< parameters.crate >>)
          command: |
            ulimit -n 20000
            ulimit -u 20000
            ulimit -n 20000
            cargo +<< pipeline.parameters.nightly-toolchain >> -Zpackage-features test --no-default-features --features gpu,blst --verbose --package << parameters.crate >> --release -- --ignored --nocapture
          no_output_timeout: 30m


  bench:
    executor: default
    environment: *setup-env
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - restore_parameter_cache
      - run:
          name: Benchmarks
          command: cargo +$(cat rust-toolchain) build --benches --verbose --workspace
          no_output_timeout: 15m

  metrics_capture:
    docker:
      - image: filecoin/rust:latest
    environment:
      RUSTFLAGS: -Awarnings -C target-cpu=native
    working_directory: /mnt/crate
    resource_class: 2xlarge+
    steps:
      - add_ssh_keys:
          fingerprints:
            - "96:12:32:00:d7:ef:4e:ff:ae:1e:04:e2:5f:ce:23:bd"
      - run:
          name: Add benchmark server's public key to known hosts
          command: |
            mkdir -p ~/.ssh/
            if [[ ! -f ~/.ssh/known_hosts ]] || ! grep "${BENCHMARK_SERVER_IP_ADDR}" ~/.ssh/known_hosts; then
              echo "
            ${BENCHMARK_SERVER_RSA_FINGERPRINT}
              " >> ~/.ssh/known_hosts
              ssh-keyscan -H 147.75.55.201 >> ~/.ssh/known_hosts
            fi
      - checkout
      - attach_workspace:
          at: "."
      - run:
          name: Install jq
          command: apt-get install time jq -yqq
      - run:
          name: Ensure existence of Groth parameters and keys on remote host
          command: |
            ./fil-proofs-tooling/scripts/run-remote.sh "${CIRCLE_BRANCH}" "${BENCHMARK_SERVER_SSH_USERNAME}@${BENCHMARK_SERVER_IP_ADDR}" cargo run --release --package fil-proofs-param --bin paramcache -- --params-for-sector-sizes=$((512*1024*1024))
          no_output_timeout: 60m
      - run:
          name: Run hash-constraints benchmarks on remote host
          command: |
            ./fil-proofs-tooling/scripts/run-remote.sh "${CIRCLE_BRANCH}" "${BENCHMARK_SERVER_SSH_USERNAME}@${BENCHMARK_SERVER_IP_ADDR}" ./fil-proofs-tooling/scripts/benchy.sh hash-constraints > hash-constraints.json
            cat hash-constraints.json
          no_output_timeout: 60m
      - run:
          name: Run micro benchmarks
          command: |
            ./fil-proofs-tooling/scripts/run-remote.sh "${CIRCLE_BRANCH}" "${BENCHMARK_SERVER_SSH_USERNAME}@${BENCHMARK_SERVER_IP_ADDR}" ./fil-proofs-tooling/scripts/micro.sh > micro-benchmarks.json
            cat micro-benchmarks.json
          no_output_timeout: 60m
      - run:
          name: Run Winning PoST benchmarks using 512MiB sectors
          command: |
            ./fil-proofs-tooling/scripts/run-remote.sh "${CIRCLE_BRANCH}" "${BENCHMARK_SERVER_SSH_USERNAME}@${BENCHMARK_SERVER_IP_ADDR}" ./fil-proofs-tooling/scripts/benchy.sh winning-post --size=512MiB > winning-post-benchmarks.json
            cat winning-post-benchmarks.json
          no_output_timeout: 60m
      - run:
          name: Run Window PoST benchmarks using a 512MiB sector
          command: |
            ./fil-proofs-tooling/scripts/run-remote.sh "${CIRCLE_BRANCH}" "${BENCHMARK_SERVER_SSH_USERNAME}@${BENCHMARK_SERVER_IP_ADDR}" ./fil-proofs-tooling/scripts/benchy.sh window-post --size=512MiB > window-post-benchmarks.json
            cat window-post-benchmarks.json
          no_output_timeout: 60m
      - run:
          name: Aggregate benchmarks into single JSON document
          command: |
            ./fil-proofs-tooling/scripts/aggregate-benchmarks.sh winning-post-benchmarks.json micro-benchmarks.json hash-constraints.json window-post-benchmarks.json > aggregated-benchmarks.json
            cat aggregated-benchmarks.json
      - store_artifacts:
          path: winning-post-benchmarks.json
      - store_artifacts:
          path: window-post-benchmarks.json
      - store_artifacts:
          path: hash-constraints.json
      - store_artifacts:
          path: micro-benchmarks.json
      - store_artifacts:
          path: aggregated-benchmarks.json

  rustfmt:
    executor: default
    environment: *setup-env
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run:
          name: Run cargo fmt
          command: cargo fmt --all -- --check

  clippy:
    executor: default
    environment: *setup-env
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v28-b-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}
      - run:
          name: Run cargo clippy
          command: cargo +$(cat rust-toolchain) clippy --workspace
  test_darwin:
    macos:
      xcode: "10.0.0"
    working_directory: ~/crate
    resource_class: large
    environment: *setup-env
    steps:
      - checkout
      - run:
          name: Install hwloc 2.3.0
          command: |
            cd /tmp
            curl https://download.open-mpi.org/release/hwloc/v2.3/hwloc-2.3.0.tar.gz --location --output /tmp/hwloc-2.3.0.tar.gz
            tar xzvf hwloc-2.3.0.tar.gz
            cd hwloc-2.3.0
            ./configure
            make
            sudo make install
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      - run: cargo update
      - run: cargo fetch
      - run:
          name: Test Darwin
          command: |
            sudo ulimit -n 20000
            sudo ulimit -u 20000
            ulimit -n 20000
            cargo +$(cat rust-toolchain) test --release --verbose --workspace -- --nocapture
          no_output_timeout: 2h

commands:
  ensure_filecoin_parameters:
    steps:
      - run:
          name: Build paramcache if it doesn't already exist
          command: |
            set -x; test -f ~/paramcache.awesome \
            || (cargo build --release --workspace && find . -type f -name paramcache | xargs -I {} mv {} ~/paramcache.awesome)
      - run:
          name: Obtain filecoin groth parameters
          command: ~/paramcache.awesome --params-for-sector-sizes='2048,4096,16384,32768'
          no_output_timeout: 60m
  save_parameter_cache:
    steps:
      - save_cache:
          key: proof-params-v28-b-{{ checksum "filecoin-proofs/parameters.json" }}-{{ arch }}
          paths:
            - "~/paramcache.awesome"
            - "~/filecoin-proof-parameters/"
  restore_parameter_cache:
    steps:
      - restore_cache:
         keys:
            - proof-params-v28-b-{{ checksum "filecoin-proofs/parameters.json" }}-{{ arch }}

workflows:
  version: 2.1
  test_all:
    jobs:
      - ensure_groth_parameters_and_keys_linux
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch

      - test_release:
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux
            
      - test_ignored_release:
          name: test_ignored_release_storage_proofs_post
          crate: "storage-proofs/post"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux
            
      - test_ignored_release:
          name: test_ignored_release_storage_proofs_core
          crate: "storage-proofs/core"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux
            
      - test_ignored_release:
          name: test_ignored_release_storage_proofs_porep
          crate: "storage-proofs/porep"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux
            
      - test_ignored_release:
          name: test_ignored_release_filecoin_proofs
          crate: "filecoin-proofs"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_multicore_sdr:
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_blst:
          name: test_blst_filecoin_proofs
          crate: "filecoin-proofs"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_blst_ignored:
          name: test_blst_ignored_filecoin_proofs
          crate: "filecoin-proofs"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_filecoin_proofs
          crate: "filecoin-proofs"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_blst:
          name: test_blst_storage_proofs_core
          crate: "storage-proofs-core"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_blst_ignored:
          name: test_blst_ignored_storage_proofs_core
          crate: "storage-proofs-core"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_storage_proofs_core
          crate: "storage-proofs-core"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_blst:
          name: test_blst_storage_proofs_post
          crate: "storage-proofs-post"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_blst_ignored:
          name: test_blst_ignored_storage_proofs_post
          crate: "storage-proofs-post"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_storage_proofs_post
          crate: "storage-proofs-post"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux


      - test_blst:
          name: test_blst_storage_proofs_porep
          crate: "storage-proofs-porep"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_blst_ignored:
          name: test_blst_ignored_storage_proofs_porep
          crate: "storage-proofs-porep"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_storage_proofs_porep
          crate: "storage-proofs-porep"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux


      - test_blst:
          name: test_blst_fil_proofs_tooling
          crate: "fil-proofs-tooling"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_fil_proofs_tooling
          crate: "fil-proofs-tooling"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_sha2raw
          crate: "sha2raw"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

            
      - test_blst:
          name: test_blst_phase2
          crate: "filecoin-phase2"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_phase2
          crate: "filecoin-phase2"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test_blst:
          name: test_blst_filecoin_hashers
          crate: "filecoin-hashers"
          features: "blst,gpu,poseidon,sha256,blake2s"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_filecoin_hashers
          crate: "filecoin-hashers"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux


      - test_blst:
          name: test_blst_fil_proofs_param
          crate: "fil-proofs-param"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - test:
          name: test_fil_proofs_param
          crate: "fil-proofs-param"
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux

      - bench:
          requires:
            - cargo_fetch
            - ensure_groth_parameters_and_keys_linux
      - test_darwin
      - metrics_capture:
          requires:
            - cargo_fetch
          filters:
            branches:
              only:
                - master
